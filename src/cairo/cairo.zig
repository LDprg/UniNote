pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub extern fn cairo_version() c_int;
pub extern fn cairo_version_string() [*c]const u8;
pub const cairo_bool_t = c_int;
pub const struct__cairo = opaque {};
pub const cairo_t = struct__cairo;
pub const struct__cairo_surface = opaque {};
pub const cairo_surface_t = struct__cairo_surface;
pub const struct__cairo_device = opaque {};
pub const cairo_device_t = struct__cairo_device;
pub const struct__cairo_matrix = extern struct {
    xx: f64 = @import("std").mem.zeroes(f64),
    yx: f64 = @import("std").mem.zeroes(f64),
    xy: f64 = @import("std").mem.zeroes(f64),
    yy: f64 = @import("std").mem.zeroes(f64),
    x0: f64 = @import("std").mem.zeroes(f64),
    y0: f64 = @import("std").mem.zeroes(f64),
};
pub const cairo_matrix_t = struct__cairo_matrix;
pub const struct__cairo_pattern = opaque {};
pub const cairo_pattern_t = struct__cairo_pattern;
pub const cairo_destroy_func_t = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct__cairo_user_data_key = extern struct {
    unused: c_int = @import("std").mem.zeroes(c_int),
};
pub const cairo_user_data_key_t = struct__cairo_user_data_key;
pub const CAIRO_STATUS_SUCCESS: c_int = 0;
pub const CAIRO_STATUS_NO_MEMORY: c_int = 1;
pub const CAIRO_STATUS_INVALID_RESTORE: c_int = 2;
pub const CAIRO_STATUS_INVALID_POP_GROUP: c_int = 3;
pub const CAIRO_STATUS_NO_CURRENT_POINT: c_int = 4;
pub const CAIRO_STATUS_INVALID_MATRIX: c_int = 5;
pub const CAIRO_STATUS_INVALID_STATUS: c_int = 6;
pub const CAIRO_STATUS_NULL_POINTER: c_int = 7;
pub const CAIRO_STATUS_INVALID_STRING: c_int = 8;
pub const CAIRO_STATUS_INVALID_PATH_DATA: c_int = 9;
pub const CAIRO_STATUS_READ_ERROR: c_int = 10;
pub const CAIRO_STATUS_WRITE_ERROR: c_int = 11;
pub const CAIRO_STATUS_SURFACE_FINISHED: c_int = 12;
pub const CAIRO_STATUS_SURFACE_TYPE_MISMATCH: c_int = 13;
pub const CAIRO_STATUS_PATTERN_TYPE_MISMATCH: c_int = 14;
pub const CAIRO_STATUS_INVALID_CONTENT: c_int = 15;
pub const CAIRO_STATUS_INVALID_FORMAT: c_int = 16;
pub const CAIRO_STATUS_INVALID_VISUAL: c_int = 17;
pub const CAIRO_STATUS_FILE_NOT_FOUND: c_int = 18;
pub const CAIRO_STATUS_INVALID_DASH: c_int = 19;
pub const CAIRO_STATUS_INVALID_DSC_COMMENT: c_int = 20;
pub const CAIRO_STATUS_INVALID_INDEX: c_int = 21;
pub const CAIRO_STATUS_CLIP_NOT_REPRESENTABLE: c_int = 22;
pub const CAIRO_STATUS_TEMP_FILE_ERROR: c_int = 23;
pub const CAIRO_STATUS_INVALID_STRIDE: c_int = 24;
pub const CAIRO_STATUS_FONT_TYPE_MISMATCH: c_int = 25;
pub const CAIRO_STATUS_USER_FONT_IMMUTABLE: c_int = 26;
pub const CAIRO_STATUS_USER_FONT_ERROR: c_int = 27;
pub const CAIRO_STATUS_NEGATIVE_COUNT: c_int = 28;
pub const CAIRO_STATUS_INVALID_CLUSTERS: c_int = 29;
pub const CAIRO_STATUS_INVALID_SLANT: c_int = 30;
pub const CAIRO_STATUS_INVALID_WEIGHT: c_int = 31;
pub const CAIRO_STATUS_INVALID_SIZE: c_int = 32;
pub const CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED: c_int = 33;
pub const CAIRO_STATUS_DEVICE_TYPE_MISMATCH: c_int = 34;
pub const CAIRO_STATUS_DEVICE_ERROR: c_int = 35;
pub const CAIRO_STATUS_INVALID_MESH_CONSTRUCTION: c_int = 36;
pub const CAIRO_STATUS_DEVICE_FINISHED: c_int = 37;
pub const CAIRO_STATUS_JBIG2_GLOBAL_MISSING: c_int = 38;
pub const CAIRO_STATUS_PNG_ERROR: c_int = 39;
pub const CAIRO_STATUS_FREETYPE_ERROR: c_int = 40;
pub const CAIRO_STATUS_WIN32_GDI_ERROR: c_int = 41;
pub const CAIRO_STATUS_TAG_ERROR: c_int = 42;
pub const CAIRO_STATUS_DWRITE_ERROR: c_int = 43;
pub const CAIRO_STATUS_SVG_FONT_ERROR: c_int = 44;
pub const CAIRO_STATUS_LAST_STATUS: c_int = 45;
pub const enum__cairo_status = c_uint;
pub const cairo_status_t = enum__cairo_status;
pub const CAIRO_CONTENT_COLOR: c_int = 4096;
pub const CAIRO_CONTENT_ALPHA: c_int = 8192;
pub const CAIRO_CONTENT_COLOR_ALPHA: c_int = 12288;
pub const enum__cairo_content = c_uint;
pub const cairo_content_t = enum__cairo_content;
pub const CAIRO_FORMAT_INVALID: c_int = -1;
pub const CAIRO_FORMAT_ARGB32: c_int = 0;
pub const CAIRO_FORMAT_RGB24: c_int = 1;
pub const CAIRO_FORMAT_A8: c_int = 2;
pub const CAIRO_FORMAT_A1: c_int = 3;
pub const CAIRO_FORMAT_RGB16_565: c_int = 4;
pub const CAIRO_FORMAT_RGB30: c_int = 5;
pub const CAIRO_FORMAT_RGB96F: c_int = 6;
pub const CAIRO_FORMAT_RGBA128F: c_int = 7;
pub const enum__cairo_format = c_int;
pub const cairo_format_t = enum__cairo_format;
pub const CAIRO_DITHER_NONE: c_int = 0;
pub const CAIRO_DITHER_DEFAULT: c_int = 1;
pub const CAIRO_DITHER_FAST: c_int = 2;
pub const CAIRO_DITHER_GOOD: c_int = 3;
pub const CAIRO_DITHER_BEST: c_int = 4;
pub const enum__cairo_dither = c_uint;
pub const cairo_dither_t = enum__cairo_dither;
pub extern fn cairo_pattern_set_dither(pattern: ?*cairo_pattern_t, dither: cairo_dither_t) void;
pub extern fn cairo_pattern_get_dither(pattern: ?*cairo_pattern_t) cairo_dither_t;
pub const cairo_write_func_t = ?*const fn (?*anyopaque, [*c]const u8, c_uint) callconv(.C) cairo_status_t;
pub const cairo_read_func_t = ?*const fn (?*anyopaque, [*c]u8, c_uint) callconv(.C) cairo_status_t;
pub const struct__cairo_rectangle_int = extern struct {
    x: c_int = @import("std").mem.zeroes(c_int),
    y: c_int = @import("std").mem.zeroes(c_int),
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
};
pub const cairo_rectangle_int_t = struct__cairo_rectangle_int;
pub extern fn cairo_create(target: ?*cairo_surface_t) ?*cairo_t;
pub extern fn cairo_reference(cr: ?*cairo_t) ?*cairo_t;
pub extern fn cairo_destroy(cr: ?*cairo_t) void;
pub extern fn cairo_get_reference_count(cr: ?*cairo_t) c_uint;
pub extern fn cairo_get_user_data(cr: ?*cairo_t, key: [*c]const cairo_user_data_key_t) ?*anyopaque;
pub extern fn cairo_set_user_data(cr: ?*cairo_t, key: [*c]const cairo_user_data_key_t, user_data: ?*anyopaque, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_save(cr: ?*cairo_t) void;
pub extern fn cairo_restore(cr: ?*cairo_t) void;
pub extern fn cairo_push_group(cr: ?*cairo_t) void;
pub extern fn cairo_push_group_with_content(cr: ?*cairo_t, content: cairo_content_t) void;
pub extern fn cairo_pop_group(cr: ?*cairo_t) ?*cairo_pattern_t;
pub extern fn cairo_pop_group_to_source(cr: ?*cairo_t) void;
pub const CAIRO_OPERATOR_CLEAR: c_int = 0;
pub const CAIRO_OPERATOR_SOURCE: c_int = 1;
pub const CAIRO_OPERATOR_OVER: c_int = 2;
pub const CAIRO_OPERATOR_IN: c_int = 3;
pub const CAIRO_OPERATOR_OUT: c_int = 4;
pub const CAIRO_OPERATOR_ATOP: c_int = 5;
pub const CAIRO_OPERATOR_DEST: c_int = 6;
pub const CAIRO_OPERATOR_DEST_OVER: c_int = 7;
pub const CAIRO_OPERATOR_DEST_IN: c_int = 8;
pub const CAIRO_OPERATOR_DEST_OUT: c_int = 9;
pub const CAIRO_OPERATOR_DEST_ATOP: c_int = 10;
pub const CAIRO_OPERATOR_XOR: c_int = 11;
pub const CAIRO_OPERATOR_ADD: c_int = 12;
pub const CAIRO_OPERATOR_SATURATE: c_int = 13;
pub const CAIRO_OPERATOR_MULTIPLY: c_int = 14;
pub const CAIRO_OPERATOR_SCREEN: c_int = 15;
pub const CAIRO_OPERATOR_OVERLAY: c_int = 16;
pub const CAIRO_OPERATOR_DARKEN: c_int = 17;
pub const CAIRO_OPERATOR_LIGHTEN: c_int = 18;
pub const CAIRO_OPERATOR_COLOR_DODGE: c_int = 19;
pub const CAIRO_OPERATOR_COLOR_BURN: c_int = 20;
pub const CAIRO_OPERATOR_HARD_LIGHT: c_int = 21;
pub const CAIRO_OPERATOR_SOFT_LIGHT: c_int = 22;
pub const CAIRO_OPERATOR_DIFFERENCE: c_int = 23;
pub const CAIRO_OPERATOR_EXCLUSION: c_int = 24;
pub const CAIRO_OPERATOR_HSL_HUE: c_int = 25;
pub const CAIRO_OPERATOR_HSL_SATURATION: c_int = 26;
pub const CAIRO_OPERATOR_HSL_COLOR: c_int = 27;
pub const CAIRO_OPERATOR_HSL_LUMINOSITY: c_int = 28;
pub const enum__cairo_operator = c_uint;
pub const cairo_operator_t = enum__cairo_operator;
pub extern fn cairo_set_operator(cr: ?*cairo_t, op: cairo_operator_t) void;
pub extern fn cairo_set_source(cr: ?*cairo_t, source: ?*cairo_pattern_t) void;
pub extern fn cairo_set_source_rgb(cr: ?*cairo_t, red: f64, green: f64, blue: f64) void;
pub extern fn cairo_set_source_rgba(cr: ?*cairo_t, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_set_source_surface(cr: ?*cairo_t, surface: ?*cairo_surface_t, x: f64, y: f64) void;
pub extern fn cairo_set_tolerance(cr: ?*cairo_t, tolerance: f64) void;
pub const CAIRO_ANTIALIAS_DEFAULT: c_int = 0;
pub const CAIRO_ANTIALIAS_NONE: c_int = 1;
pub const CAIRO_ANTIALIAS_GRAY: c_int = 2;
pub const CAIRO_ANTIALIAS_SUBPIXEL: c_int = 3;
pub const CAIRO_ANTIALIAS_FAST: c_int = 4;
pub const CAIRO_ANTIALIAS_GOOD: c_int = 5;
pub const CAIRO_ANTIALIAS_BEST: c_int = 6;
pub const enum__cairo_antialias = c_uint;
pub const cairo_antialias_t = enum__cairo_antialias;
pub extern fn cairo_set_antialias(cr: ?*cairo_t, antialias: cairo_antialias_t) void;
pub const CAIRO_FILL_RULE_WINDING: c_int = 0;
pub const CAIRO_FILL_RULE_EVEN_ODD: c_int = 1;
pub const enum__cairo_fill_rule = c_uint;
pub const cairo_fill_rule_t = enum__cairo_fill_rule;
pub extern fn cairo_set_fill_rule(cr: ?*cairo_t, fill_rule: cairo_fill_rule_t) void;
pub extern fn cairo_set_line_width(cr: ?*cairo_t, width: f64) void;
pub extern fn cairo_set_hairline(cr: ?*cairo_t, set_hairline: cairo_bool_t) void;
pub const CAIRO_LINE_CAP_BUTT: c_int = 0;
pub const CAIRO_LINE_CAP_ROUND: c_int = 1;
pub const CAIRO_LINE_CAP_SQUARE: c_int = 2;
pub const enum__cairo_line_cap = c_uint;
pub const cairo_line_cap_t = enum__cairo_line_cap;
pub extern fn cairo_set_line_cap(cr: ?*cairo_t, line_cap: cairo_line_cap_t) void;
pub const CAIRO_LINE_JOIN_MITER: c_int = 0;
pub const CAIRO_LINE_JOIN_ROUND: c_int = 1;
pub const CAIRO_LINE_JOIN_BEVEL: c_int = 2;
pub const enum__cairo_line_join = c_uint;
pub const cairo_line_join_t = enum__cairo_line_join;
pub extern fn cairo_set_line_join(cr: ?*cairo_t, line_join: cairo_line_join_t) void;
pub extern fn cairo_set_dash(cr: ?*cairo_t, dashes: [*c]const f64, num_dashes: c_int, offset: f64) void;
pub extern fn cairo_set_miter_limit(cr: ?*cairo_t, limit: f64) void;
pub extern fn cairo_translate(cr: ?*cairo_t, tx: f64, ty: f64) void;
pub extern fn cairo_scale(cr: ?*cairo_t, sx: f64, sy: f64) void;
pub extern fn cairo_rotate(cr: ?*cairo_t, angle: f64) void;
pub extern fn cairo_transform(cr: ?*cairo_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_set_matrix(cr: ?*cairo_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_identity_matrix(cr: ?*cairo_t) void;
pub extern fn cairo_user_to_device(cr: ?*cairo_t, x: [*c]f64, y: [*c]f64) void;
pub extern fn cairo_user_to_device_distance(cr: ?*cairo_t, dx: [*c]f64, dy: [*c]f64) void;
pub extern fn cairo_device_to_user(cr: ?*cairo_t, x: [*c]f64, y: [*c]f64) void;
pub extern fn cairo_device_to_user_distance(cr: ?*cairo_t, dx: [*c]f64, dy: [*c]f64) void;
pub extern fn cairo_new_path(cr: ?*cairo_t) void;
pub extern fn cairo_move_to(cr: ?*cairo_t, x: f64, y: f64) void;
pub extern fn cairo_new_sub_path(cr: ?*cairo_t) void;
pub extern fn cairo_line_to(cr: ?*cairo_t, x: f64, y: f64) void;
pub extern fn cairo_curve_to(cr: ?*cairo_t, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64) void;
pub extern fn cairo_arc(cr: ?*cairo_t, xc: f64, yc: f64, radius: f64, angle1: f64, angle2: f64) void;
pub extern fn cairo_arc_negative(cr: ?*cairo_t, xc: f64, yc: f64, radius: f64, angle1: f64, angle2: f64) void;
pub extern fn cairo_rel_move_to(cr: ?*cairo_t, dx: f64, dy: f64) void;
pub extern fn cairo_rel_line_to(cr: ?*cairo_t, dx: f64, dy: f64) void;
pub extern fn cairo_rel_curve_to(cr: ?*cairo_t, dx1: f64, dy1: f64, dx2: f64, dy2: f64, dx3: f64, dy3: f64) void;
pub extern fn cairo_rectangle(cr: ?*cairo_t, x: f64, y: f64, width: f64, height: f64) void;
pub extern fn cairo_close_path(cr: ?*cairo_t) void;
pub extern fn cairo_path_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub extern fn cairo_paint(cr: ?*cairo_t) void;
pub extern fn cairo_paint_with_alpha(cr: ?*cairo_t, alpha: f64) void;
pub extern fn cairo_mask(cr: ?*cairo_t, pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_mask_surface(cr: ?*cairo_t, surface: ?*cairo_surface_t, surface_x: f64, surface_y: f64) void;
pub extern fn cairo_stroke(cr: ?*cairo_t) void;
pub extern fn cairo_stroke_preserve(cr: ?*cairo_t) void;
pub extern fn cairo_fill(cr: ?*cairo_t) void;
pub extern fn cairo_fill_preserve(cr: ?*cairo_t) void;
pub extern fn cairo_copy_page(cr: ?*cairo_t) void;
pub extern fn cairo_show_page(cr: ?*cairo_t) void;
pub extern fn cairo_in_stroke(cr: ?*cairo_t, x: f64, y: f64) cairo_bool_t;
pub extern fn cairo_in_fill(cr: ?*cairo_t, x: f64, y: f64) cairo_bool_t;
pub extern fn cairo_in_clip(cr: ?*cairo_t, x: f64, y: f64) cairo_bool_t;
pub extern fn cairo_stroke_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub extern fn cairo_fill_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub extern fn cairo_reset_clip(cr: ?*cairo_t) void;
pub extern fn cairo_clip(cr: ?*cairo_t) void;
pub extern fn cairo_clip_preserve(cr: ?*cairo_t) void;
pub extern fn cairo_clip_extents(cr: ?*cairo_t, x1: [*c]f64, y1: [*c]f64, x2: [*c]f64, y2: [*c]f64) void;
pub const struct__cairo_rectangle = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
    width: f64 = @import("std").mem.zeroes(f64),
    height: f64 = @import("std").mem.zeroes(f64),
};
pub const cairo_rectangle_t = struct__cairo_rectangle;
pub const struct__cairo_rectangle_list = extern struct {
    status: cairo_status_t = @import("std").mem.zeroes(cairo_status_t),
    rectangles: [*c]cairo_rectangle_t = @import("std").mem.zeroes([*c]cairo_rectangle_t),
    num_rectangles: c_int = @import("std").mem.zeroes(c_int),
};
pub const cairo_rectangle_list_t = struct__cairo_rectangle_list;
pub extern fn cairo_copy_clip_rectangle_list(cr: ?*cairo_t) [*c]cairo_rectangle_list_t;
pub extern fn cairo_rectangle_list_destroy(rectangle_list: [*c]cairo_rectangle_list_t) void;
pub extern fn cairo_tag_begin(cr: ?*cairo_t, tag_name: [*c]const u8, attributes: [*c]const u8) void;
pub extern fn cairo_tag_end(cr: ?*cairo_t, tag_name: [*c]const u8) void;
pub const struct__cairo_scaled_font = opaque {};
pub const cairo_scaled_font_t = struct__cairo_scaled_font;
pub const struct__cairo_font_face = opaque {};
pub const cairo_font_face_t = struct__cairo_font_face;
pub const cairo_glyph_t = extern struct {
    index: c_ulong = @import("std").mem.zeroes(c_ulong),
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
};
pub extern fn cairo_glyph_allocate(num_glyphs: c_int) [*c]cairo_glyph_t;
pub extern fn cairo_glyph_free(glyphs: [*c]cairo_glyph_t) void;
pub const cairo_text_cluster_t = extern struct {
    num_bytes: c_int = @import("std").mem.zeroes(c_int),
    num_glyphs: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn cairo_text_cluster_allocate(num_clusters: c_int) [*c]cairo_text_cluster_t;
pub extern fn cairo_text_cluster_free(clusters: [*c]cairo_text_cluster_t) void;
pub const CAIRO_TEXT_CLUSTER_FLAG_BACKWARD: c_int = 1;
pub const enum__cairo_text_cluster_flags = c_uint;
pub const cairo_text_cluster_flags_t = enum__cairo_text_cluster_flags;
pub const cairo_text_extents_t = extern struct {
    x_bearing: f64 = @import("std").mem.zeroes(f64),
    y_bearing: f64 = @import("std").mem.zeroes(f64),
    width: f64 = @import("std").mem.zeroes(f64),
    height: f64 = @import("std").mem.zeroes(f64),
    x_advance: f64 = @import("std").mem.zeroes(f64),
    y_advance: f64 = @import("std").mem.zeroes(f64),
};
pub const cairo_font_extents_t = extern struct {
    ascent: f64 = @import("std").mem.zeroes(f64),
    descent: f64 = @import("std").mem.zeroes(f64),
    height: f64 = @import("std").mem.zeroes(f64),
    max_x_advance: f64 = @import("std").mem.zeroes(f64),
    max_y_advance: f64 = @import("std").mem.zeroes(f64),
};
pub const CAIRO_FONT_SLANT_NORMAL: c_int = 0;
pub const CAIRO_FONT_SLANT_ITALIC: c_int = 1;
pub const CAIRO_FONT_SLANT_OBLIQUE: c_int = 2;
pub const enum__cairo_font_slant = c_uint;
pub const cairo_font_slant_t = enum__cairo_font_slant;
pub const CAIRO_FONT_WEIGHT_NORMAL: c_int = 0;
pub const CAIRO_FONT_WEIGHT_BOLD: c_int = 1;
pub const enum__cairo_font_weight = c_uint;
pub const cairo_font_weight_t = enum__cairo_font_weight;
pub const CAIRO_SUBPIXEL_ORDER_DEFAULT: c_int = 0;
pub const CAIRO_SUBPIXEL_ORDER_RGB: c_int = 1;
pub const CAIRO_SUBPIXEL_ORDER_BGR: c_int = 2;
pub const CAIRO_SUBPIXEL_ORDER_VRGB: c_int = 3;
pub const CAIRO_SUBPIXEL_ORDER_VBGR: c_int = 4;
pub const enum__cairo_subpixel_order = c_uint;
pub const cairo_subpixel_order_t = enum__cairo_subpixel_order;
pub const CAIRO_HINT_STYLE_DEFAULT: c_int = 0;
pub const CAIRO_HINT_STYLE_NONE: c_int = 1;
pub const CAIRO_HINT_STYLE_SLIGHT: c_int = 2;
pub const CAIRO_HINT_STYLE_MEDIUM: c_int = 3;
pub const CAIRO_HINT_STYLE_FULL: c_int = 4;
pub const enum__cairo_hint_style = c_uint;
pub const cairo_hint_style_t = enum__cairo_hint_style;
pub const CAIRO_HINT_METRICS_DEFAULT: c_int = 0;
pub const CAIRO_HINT_METRICS_OFF: c_int = 1;
pub const CAIRO_HINT_METRICS_ON: c_int = 2;
pub const enum__cairo_hint_metrics = c_uint;
pub const cairo_hint_metrics_t = enum__cairo_hint_metrics;
pub const CAIRO_COLOR_MODE_DEFAULT: c_int = 0;
pub const CAIRO_COLOR_MODE_NO_COLOR: c_int = 1;
pub const CAIRO_COLOR_MODE_COLOR: c_int = 2;
pub const enum__cairo_color_mode = c_uint;
pub const cairo_color_mode_t = enum__cairo_color_mode;
pub const struct__cairo_font_options = opaque {};
pub const cairo_font_options_t = struct__cairo_font_options;
pub extern fn cairo_font_options_create() ?*cairo_font_options_t;
pub extern fn cairo_font_options_copy(original: ?*const cairo_font_options_t) ?*cairo_font_options_t;
pub extern fn cairo_font_options_destroy(options: ?*cairo_font_options_t) void;
pub extern fn cairo_font_options_status(options: ?*cairo_font_options_t) cairo_status_t;
pub extern fn cairo_font_options_merge(options: ?*cairo_font_options_t, other: ?*const cairo_font_options_t) void;
pub extern fn cairo_font_options_equal(options: ?*const cairo_font_options_t, other: ?*const cairo_font_options_t) cairo_bool_t;
pub extern fn cairo_font_options_hash(options: ?*const cairo_font_options_t) c_ulong;
pub extern fn cairo_font_options_set_antialias(options: ?*cairo_font_options_t, antialias: cairo_antialias_t) void;
pub extern fn cairo_font_options_get_antialias(options: ?*const cairo_font_options_t) cairo_antialias_t;
pub extern fn cairo_font_options_set_subpixel_order(options: ?*cairo_font_options_t, subpixel_order: cairo_subpixel_order_t) void;
pub extern fn cairo_font_options_get_subpixel_order(options: ?*const cairo_font_options_t) cairo_subpixel_order_t;
pub extern fn cairo_font_options_set_hint_style(options: ?*cairo_font_options_t, hint_style: cairo_hint_style_t) void;
pub extern fn cairo_font_options_get_hint_style(options: ?*const cairo_font_options_t) cairo_hint_style_t;
pub extern fn cairo_font_options_set_hint_metrics(options: ?*cairo_font_options_t, hint_metrics: cairo_hint_metrics_t) void;
pub extern fn cairo_font_options_get_hint_metrics(options: ?*const cairo_font_options_t) cairo_hint_metrics_t;
pub extern fn cairo_font_options_get_variations(options: ?*cairo_font_options_t) [*c]const u8;
pub extern fn cairo_font_options_set_variations(options: ?*cairo_font_options_t, variations: [*c]const u8) void;
pub extern fn cairo_font_options_set_color_mode(options: ?*cairo_font_options_t, color_mode: cairo_color_mode_t) void;
pub extern fn cairo_font_options_get_color_mode(options: ?*const cairo_font_options_t) cairo_color_mode_t;
pub extern fn cairo_font_options_get_color_palette(options: ?*const cairo_font_options_t) c_uint;
pub extern fn cairo_font_options_set_color_palette(options: ?*cairo_font_options_t, palette_index: c_uint) void;
pub extern fn cairo_font_options_set_custom_palette_color(options: ?*cairo_font_options_t, index: c_uint, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_font_options_get_custom_palette_color(options: ?*cairo_font_options_t, index: c_uint, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_select_font_face(cr: ?*cairo_t, family: [*c]const u8, slant: cairo_font_slant_t, weight: cairo_font_weight_t) void;
pub extern fn cairo_set_font_size(cr: ?*cairo_t, size: f64) void;
pub extern fn cairo_set_font_matrix(cr: ?*cairo_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_get_font_matrix(cr: ?*cairo_t, matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_set_font_options(cr: ?*cairo_t, options: ?*const cairo_font_options_t) void;
pub extern fn cairo_get_font_options(cr: ?*cairo_t, options: ?*cairo_font_options_t) void;
pub extern fn cairo_set_font_face(cr: ?*cairo_t, font_face: ?*cairo_font_face_t) void;
pub extern fn cairo_get_font_face(cr: ?*cairo_t) ?*cairo_font_face_t;
pub extern fn cairo_set_scaled_font(cr: ?*cairo_t, scaled_font: ?*const cairo_scaled_font_t) void;
pub extern fn cairo_get_scaled_font(cr: ?*cairo_t) ?*cairo_scaled_font_t;
pub extern fn cairo_show_text(cr: ?*cairo_t, utf8: [*c]const u8) void;
pub extern fn cairo_show_glyphs(cr: ?*cairo_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int) void;
pub extern fn cairo_show_text_glyphs(cr: ?*cairo_t, utf8: [*c]const u8, utf8_len: c_int, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int, clusters: [*c]const cairo_text_cluster_t, num_clusters: c_int, cluster_flags: cairo_text_cluster_flags_t) void;
pub extern fn cairo_text_path(cr: ?*cairo_t, utf8: [*c]const u8) void;
pub extern fn cairo_glyph_path(cr: ?*cairo_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int) void;
pub extern fn cairo_text_extents(cr: ?*cairo_t, utf8: [*c]const u8, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_glyph_extents(cr: ?*cairo_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_font_extents(cr: ?*cairo_t, extents: [*c]cairo_font_extents_t) void;
pub extern fn cairo_font_face_reference(font_face: ?*cairo_font_face_t) ?*cairo_font_face_t;
pub extern fn cairo_font_face_destroy(font_face: ?*cairo_font_face_t) void;
pub extern fn cairo_font_face_get_reference_count(font_face: ?*cairo_font_face_t) c_uint;
pub extern fn cairo_font_face_status(font_face: ?*cairo_font_face_t) cairo_status_t;
pub const CAIRO_FONT_TYPE_TOY: c_int = 0;
pub const CAIRO_FONT_TYPE_FT: c_int = 1;
pub const CAIRO_FONT_TYPE_WIN32: c_int = 2;
pub const CAIRO_FONT_TYPE_QUARTZ: c_int = 3;
pub const CAIRO_FONT_TYPE_USER: c_int = 4;
pub const CAIRO_FONT_TYPE_DWRITE: c_int = 5;
pub const enum__cairo_font_type = c_uint;
pub const cairo_font_type_t = enum__cairo_font_type;
pub extern fn cairo_font_face_get_type(font_face: ?*cairo_font_face_t) cairo_font_type_t;
pub extern fn cairo_font_face_get_user_data(font_face: ?*cairo_font_face_t, key: [*c]const cairo_user_data_key_t) ?*anyopaque;
pub extern fn cairo_font_face_set_user_data(font_face: ?*cairo_font_face_t, key: [*c]const cairo_user_data_key_t, user_data: ?*anyopaque, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_scaled_font_create(font_face: ?*cairo_font_face_t, font_matrix: [*c]const cairo_matrix_t, ctm: [*c]const cairo_matrix_t, options: ?*const cairo_font_options_t) ?*cairo_scaled_font_t;
pub extern fn cairo_scaled_font_reference(scaled_font: ?*cairo_scaled_font_t) ?*cairo_scaled_font_t;
pub extern fn cairo_scaled_font_destroy(scaled_font: ?*cairo_scaled_font_t) void;
pub extern fn cairo_scaled_font_get_reference_count(scaled_font: ?*cairo_scaled_font_t) c_uint;
pub extern fn cairo_scaled_font_status(scaled_font: ?*cairo_scaled_font_t) cairo_status_t;
pub extern fn cairo_scaled_font_get_type(scaled_font: ?*cairo_scaled_font_t) cairo_font_type_t;
pub extern fn cairo_scaled_font_get_user_data(scaled_font: ?*cairo_scaled_font_t, key: [*c]const cairo_user_data_key_t) ?*anyopaque;
pub extern fn cairo_scaled_font_set_user_data(scaled_font: ?*cairo_scaled_font_t, key: [*c]const cairo_user_data_key_t, user_data: ?*anyopaque, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_scaled_font_extents(scaled_font: ?*cairo_scaled_font_t, extents: [*c]cairo_font_extents_t) void;
pub extern fn cairo_scaled_font_text_extents(scaled_font: ?*cairo_scaled_font_t, utf8: [*c]const u8, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_scaled_font_glyph_extents(scaled_font: ?*cairo_scaled_font_t, glyphs: [*c]const cairo_glyph_t, num_glyphs: c_int, extents: [*c]cairo_text_extents_t) void;
pub extern fn cairo_scaled_font_text_to_glyphs(scaled_font: ?*cairo_scaled_font_t, x: f64, y: f64, utf8: [*c]const u8, utf8_len: c_int, glyphs: [*c][*c]cairo_glyph_t, num_glyphs: [*c]c_int, clusters: [*c][*c]cairo_text_cluster_t, num_clusters: [*c]c_int, cluster_flags: [*c]cairo_text_cluster_flags_t) cairo_status_t;
pub extern fn cairo_scaled_font_get_font_face(scaled_font: ?*cairo_scaled_font_t) ?*cairo_font_face_t;
pub extern fn cairo_scaled_font_get_font_matrix(scaled_font: ?*cairo_scaled_font_t, font_matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_scaled_font_get_ctm(scaled_font: ?*cairo_scaled_font_t, ctm: [*c]cairo_matrix_t) void;
pub extern fn cairo_scaled_font_get_scale_matrix(scaled_font: ?*cairo_scaled_font_t, scale_matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_scaled_font_get_font_options(scaled_font: ?*cairo_scaled_font_t, options: ?*cairo_font_options_t) void;
pub extern fn cairo_toy_font_face_create(family: [*c]const u8, slant: cairo_font_slant_t, weight: cairo_font_weight_t) ?*cairo_font_face_t;
pub extern fn cairo_toy_font_face_get_family(font_face: ?*cairo_font_face_t) [*c]const u8;
pub extern fn cairo_toy_font_face_get_slant(font_face: ?*cairo_font_face_t) cairo_font_slant_t;
pub extern fn cairo_toy_font_face_get_weight(font_face: ?*cairo_font_face_t) cairo_font_weight_t;
pub extern fn cairo_user_font_face_create() ?*cairo_font_face_t;
pub const cairo_user_scaled_font_init_func_t = ?*const fn (?*cairo_scaled_font_t, ?*cairo_t, [*c]cairo_font_extents_t) callconv(.C) cairo_status_t;
pub const cairo_user_scaled_font_render_glyph_func_t = ?*const fn (?*cairo_scaled_font_t, c_ulong, ?*cairo_t, [*c]cairo_text_extents_t) callconv(.C) cairo_status_t;
pub const cairo_user_scaled_font_text_to_glyphs_func_t = ?*const fn (?*cairo_scaled_font_t, [*c]const u8, c_int, [*c][*c]cairo_glyph_t, [*c]c_int, [*c][*c]cairo_text_cluster_t, [*c]c_int, [*c]cairo_text_cluster_flags_t) callconv(.C) cairo_status_t;
pub const cairo_user_scaled_font_unicode_to_glyph_func_t = ?*const fn (?*cairo_scaled_font_t, c_ulong, [*c]c_ulong) callconv(.C) cairo_status_t;
pub extern fn cairo_user_font_face_set_init_func(font_face: ?*cairo_font_face_t, init_func: cairo_user_scaled_font_init_func_t) void;
pub extern fn cairo_user_font_face_set_render_glyph_func(font_face: ?*cairo_font_face_t, render_glyph_func: cairo_user_scaled_font_render_glyph_func_t) void;
pub extern fn cairo_user_font_face_set_render_color_glyph_func(font_face: ?*cairo_font_face_t, render_glyph_func: cairo_user_scaled_font_render_glyph_func_t) void;
pub extern fn cairo_user_font_face_set_text_to_glyphs_func(font_face: ?*cairo_font_face_t, text_to_glyphs_func: cairo_user_scaled_font_text_to_glyphs_func_t) void;
pub extern fn cairo_user_font_face_set_unicode_to_glyph_func(font_face: ?*cairo_font_face_t, unicode_to_glyph_func: cairo_user_scaled_font_unicode_to_glyph_func_t) void;
pub extern fn cairo_user_font_face_get_init_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_init_func_t;
pub extern fn cairo_user_font_face_get_render_glyph_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_render_glyph_func_t;
pub extern fn cairo_user_font_face_get_render_color_glyph_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_render_glyph_func_t;
pub extern fn cairo_user_font_face_get_text_to_glyphs_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_text_to_glyphs_func_t;
pub extern fn cairo_user_font_face_get_unicode_to_glyph_func(font_face: ?*cairo_font_face_t) cairo_user_scaled_font_unicode_to_glyph_func_t;
pub extern fn cairo_user_scaled_font_get_foreground_marker(scaled_font: ?*cairo_scaled_font_t) ?*cairo_pattern_t;
pub extern fn cairo_user_scaled_font_get_foreground_source(scaled_font: ?*cairo_scaled_font_t) ?*cairo_pattern_t;
pub extern fn cairo_get_operator(cr: ?*cairo_t) cairo_operator_t;
pub extern fn cairo_get_source(cr: ?*cairo_t) ?*cairo_pattern_t;
pub extern fn cairo_get_tolerance(cr: ?*cairo_t) f64;
pub extern fn cairo_get_antialias(cr: ?*cairo_t) cairo_antialias_t;
pub extern fn cairo_has_current_point(cr: ?*cairo_t) cairo_bool_t;
pub extern fn cairo_get_current_point(cr: ?*cairo_t, x: [*c]f64, y: [*c]f64) void;
pub extern fn cairo_get_fill_rule(cr: ?*cairo_t) cairo_fill_rule_t;
pub extern fn cairo_get_line_width(cr: ?*cairo_t) f64;
pub extern fn cairo_get_hairline(cr: ?*cairo_t) cairo_bool_t;
pub extern fn cairo_get_line_cap(cr: ?*cairo_t) cairo_line_cap_t;
pub extern fn cairo_get_line_join(cr: ?*cairo_t) cairo_line_join_t;
pub extern fn cairo_get_miter_limit(cr: ?*cairo_t) f64;
pub extern fn cairo_get_dash_count(cr: ?*cairo_t) c_int;
pub extern fn cairo_get_dash(cr: ?*cairo_t, dashes: [*c]f64, offset: [*c]f64) void;
pub extern fn cairo_get_matrix(cr: ?*cairo_t, matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_get_target(cr: ?*cairo_t) ?*cairo_surface_t;
pub extern fn cairo_get_group_target(cr: ?*cairo_t) ?*cairo_surface_t;
pub const CAIRO_PATH_MOVE_TO: c_int = 0;
pub const CAIRO_PATH_LINE_TO: c_int = 1;
pub const CAIRO_PATH_CURVE_TO: c_int = 2;
pub const CAIRO_PATH_CLOSE_PATH: c_int = 3;
pub const enum__cairo_path_data_type = c_uint;
pub const cairo_path_data_type_t = enum__cairo_path_data_type;
const struct_unnamed_1 = extern struct {
    type: cairo_path_data_type_t = @import("std").mem.zeroes(cairo_path_data_type_t),
    length: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_2 = extern struct {
    x: f64 = @import("std").mem.zeroes(f64),
    y: f64 = @import("std").mem.zeroes(f64),
};
pub const union__cairo_path_data_t = extern union {
    header: struct_unnamed_1,
    point: struct_unnamed_2,
};
pub const cairo_path_data_t = union__cairo_path_data_t;
pub const struct_cairo_path = extern struct {
    status: cairo_status_t = @import("std").mem.zeroes(cairo_status_t),
    data: [*c]cairo_path_data_t = @import("std").mem.zeroes([*c]cairo_path_data_t),
    num_data: c_int = @import("std").mem.zeroes(c_int),
};
pub const cairo_path_t = struct_cairo_path;
pub extern fn cairo_copy_path(cr: ?*cairo_t) [*c]cairo_path_t;
pub extern fn cairo_copy_path_flat(cr: ?*cairo_t) [*c]cairo_path_t;
pub extern fn cairo_append_path(cr: ?*cairo_t, path: [*c]const cairo_path_t) void;
pub extern fn cairo_path_destroy(path: [*c]cairo_path_t) void;
pub extern fn cairo_status(cr: ?*cairo_t) cairo_status_t;
pub extern fn cairo_status_to_string(status: cairo_status_t) [*c]const u8;
pub extern fn cairo_device_reference(device: ?*cairo_device_t) ?*cairo_device_t;
pub const CAIRO_DEVICE_TYPE_DRM: c_int = 0;
pub const CAIRO_DEVICE_TYPE_GL: c_int = 1;
pub const CAIRO_DEVICE_TYPE_SCRIPT: c_int = 2;
pub const CAIRO_DEVICE_TYPE_XCB: c_int = 3;
pub const CAIRO_DEVICE_TYPE_XLIB: c_int = 4;
pub const CAIRO_DEVICE_TYPE_XML: c_int = 5;
pub const CAIRO_DEVICE_TYPE_COGL: c_int = 6;
pub const CAIRO_DEVICE_TYPE_WIN32: c_int = 7;
pub const CAIRO_DEVICE_TYPE_INVALID: c_int = -1;
pub const enum__cairo_device_type = c_int;
pub const cairo_device_type_t = enum__cairo_device_type;
pub extern fn cairo_device_get_type(device: ?*cairo_device_t) cairo_device_type_t;
pub extern fn cairo_device_status(device: ?*cairo_device_t) cairo_status_t;
pub extern fn cairo_device_acquire(device: ?*cairo_device_t) cairo_status_t;
pub extern fn cairo_device_release(device: ?*cairo_device_t) void;
pub extern fn cairo_device_flush(device: ?*cairo_device_t) void;
pub extern fn cairo_device_finish(device: ?*cairo_device_t) void;
pub extern fn cairo_device_destroy(device: ?*cairo_device_t) void;
pub extern fn cairo_device_get_reference_count(device: ?*cairo_device_t) c_uint;
pub extern fn cairo_device_get_user_data(device: ?*cairo_device_t, key: [*c]const cairo_user_data_key_t) ?*anyopaque;
pub extern fn cairo_device_set_user_data(device: ?*cairo_device_t, key: [*c]const cairo_user_data_key_t, user_data: ?*anyopaque, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_surface_create_similar(other: ?*cairo_surface_t, content: cairo_content_t, width: c_int, height: c_int) ?*cairo_surface_t;
pub extern fn cairo_surface_create_similar_image(other: ?*cairo_surface_t, format: cairo_format_t, width: c_int, height: c_int) ?*cairo_surface_t;
pub extern fn cairo_surface_map_to_image(surface: ?*cairo_surface_t, extents: [*c]const cairo_rectangle_int_t) ?*cairo_surface_t;
pub extern fn cairo_surface_unmap_image(surface: ?*cairo_surface_t, image: ?*cairo_surface_t) void;
pub extern fn cairo_surface_create_for_rectangle(target: ?*cairo_surface_t, x: f64, y: f64, width: f64, height: f64) ?*cairo_surface_t;
pub const CAIRO_SURFACE_OBSERVER_NORMAL: c_int = 0;
pub const CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS: c_int = 1;
pub const cairo_surface_observer_mode_t = c_uint;
pub extern fn cairo_surface_create_observer(target: ?*cairo_surface_t, mode: cairo_surface_observer_mode_t) ?*cairo_surface_t;
pub const cairo_surface_observer_callback_t = ?*const fn (?*cairo_surface_t, ?*cairo_surface_t, ?*anyopaque) callconv(.C) void;
pub extern fn cairo_surface_observer_add_paint_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_add_mask_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_add_fill_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_add_stroke_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_add_glyphs_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_add_flush_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_add_finish_callback(abstract_surface: ?*cairo_surface_t, func: cairo_surface_observer_callback_t, data: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_print(abstract_surface: ?*cairo_surface_t, write_func: cairo_write_func_t, closure: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_observer_elapsed(abstract_surface: ?*cairo_surface_t) f64;
pub extern fn cairo_device_observer_print(abstract_device: ?*cairo_device_t, write_func: cairo_write_func_t, closure: ?*anyopaque) cairo_status_t;
pub extern fn cairo_device_observer_elapsed(abstract_device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_paint_elapsed(abstract_device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_mask_elapsed(abstract_device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_fill_elapsed(abstract_device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_stroke_elapsed(abstract_device: ?*cairo_device_t) f64;
pub extern fn cairo_device_observer_glyphs_elapsed(abstract_device: ?*cairo_device_t) f64;
pub extern fn cairo_surface_reference(surface: ?*cairo_surface_t) ?*cairo_surface_t;
pub extern fn cairo_surface_finish(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_destroy(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_get_device(surface: ?*cairo_surface_t) ?*cairo_device_t;
pub extern fn cairo_surface_get_reference_count(surface: ?*cairo_surface_t) c_uint;
pub extern fn cairo_surface_status(surface: ?*cairo_surface_t) cairo_status_t;
pub const CAIRO_SURFACE_TYPE_IMAGE: c_int = 0;
pub const CAIRO_SURFACE_TYPE_PDF: c_int = 1;
pub const CAIRO_SURFACE_TYPE_PS: c_int = 2;
pub const CAIRO_SURFACE_TYPE_XLIB: c_int = 3;
pub const CAIRO_SURFACE_TYPE_XCB: c_int = 4;
pub const CAIRO_SURFACE_TYPE_GLITZ: c_int = 5;
pub const CAIRO_SURFACE_TYPE_QUARTZ: c_int = 6;
pub const CAIRO_SURFACE_TYPE_WIN32: c_int = 7;
pub const CAIRO_SURFACE_TYPE_BEOS: c_int = 8;
pub const CAIRO_SURFACE_TYPE_DIRECTFB: c_int = 9;
pub const CAIRO_SURFACE_TYPE_SVG: c_int = 10;
pub const CAIRO_SURFACE_TYPE_OS2: c_int = 11;
pub const CAIRO_SURFACE_TYPE_WIN32_PRINTING: c_int = 12;
pub const CAIRO_SURFACE_TYPE_QUARTZ_IMAGE: c_int = 13;
pub const CAIRO_SURFACE_TYPE_SCRIPT: c_int = 14;
pub const CAIRO_SURFACE_TYPE_QT: c_int = 15;
pub const CAIRO_SURFACE_TYPE_RECORDING: c_int = 16;
pub const CAIRO_SURFACE_TYPE_VG: c_int = 17;
pub const CAIRO_SURFACE_TYPE_GL: c_int = 18;
pub const CAIRO_SURFACE_TYPE_DRM: c_int = 19;
pub const CAIRO_SURFACE_TYPE_TEE: c_int = 20;
pub const CAIRO_SURFACE_TYPE_XML: c_int = 21;
pub const CAIRO_SURFACE_TYPE_SKIA: c_int = 22;
pub const CAIRO_SURFACE_TYPE_SUBSURFACE: c_int = 23;
pub const CAIRO_SURFACE_TYPE_COGL: c_int = 24;
pub const enum__cairo_surface_type = c_uint;
pub const cairo_surface_type_t = enum__cairo_surface_type;
pub extern fn cairo_surface_get_type(surface: ?*cairo_surface_t) cairo_surface_type_t;
pub extern fn cairo_surface_get_content(surface: ?*cairo_surface_t) cairo_content_t;
pub extern fn cairo_surface_write_to_png(surface: ?*cairo_surface_t, filename: [*c]const u8) cairo_status_t;
pub extern fn cairo_surface_write_to_png_stream(surface: ?*cairo_surface_t, write_func: cairo_write_func_t, closure: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_get_user_data(surface: ?*cairo_surface_t, key: [*c]const cairo_user_data_key_t) ?*anyopaque;
pub extern fn cairo_surface_set_user_data(surface: ?*cairo_surface_t, key: [*c]const cairo_user_data_key_t, user_data: ?*anyopaque, destroy: cairo_destroy_func_t) cairo_status_t;
pub extern fn cairo_surface_get_mime_data(surface: ?*cairo_surface_t, mime_type: [*c]const u8, data: [*c][*c]const u8, length: [*c]c_ulong) void;
pub extern fn cairo_surface_set_mime_data(surface: ?*cairo_surface_t, mime_type: [*c]const u8, data: [*c]const u8, length: c_ulong, destroy: cairo_destroy_func_t, closure: ?*anyopaque) cairo_status_t;
pub extern fn cairo_surface_supports_mime_type(surface: ?*cairo_surface_t, mime_type: [*c]const u8) cairo_bool_t;
pub extern fn cairo_surface_get_font_options(surface: ?*cairo_surface_t, options: ?*cairo_font_options_t) void;
pub extern fn cairo_surface_flush(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_mark_dirty(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_mark_dirty_rectangle(surface: ?*cairo_surface_t, x: c_int, y: c_int, width: c_int, height: c_int) void;
pub extern fn cairo_surface_set_device_scale(surface: ?*cairo_surface_t, x_scale: f64, y_scale: f64) void;
pub extern fn cairo_surface_get_device_scale(surface: ?*cairo_surface_t, x_scale: [*c]f64, y_scale: [*c]f64) void;
pub extern fn cairo_surface_set_device_offset(surface: ?*cairo_surface_t, x_offset: f64, y_offset: f64) void;
pub extern fn cairo_surface_get_device_offset(surface: ?*cairo_surface_t, x_offset: [*c]f64, y_offset: [*c]f64) void;
pub extern fn cairo_surface_set_fallback_resolution(surface: ?*cairo_surface_t, x_pixels_per_inch: f64, y_pixels_per_inch: f64) void;
pub extern fn cairo_surface_get_fallback_resolution(surface: ?*cairo_surface_t, x_pixels_per_inch: [*c]f64, y_pixels_per_inch: [*c]f64) void;
pub extern fn cairo_surface_copy_page(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_show_page(surface: ?*cairo_surface_t) void;
pub extern fn cairo_surface_has_show_text_glyphs(surface: ?*cairo_surface_t) cairo_bool_t;
pub extern fn cairo_image_surface_create(format: cairo_format_t, width: c_int, height: c_int) ?*cairo_surface_t;
pub extern fn cairo_format_stride_for_width(format: cairo_format_t, width: c_int) c_int;
pub extern fn cairo_image_surface_create_for_data(data: [*c]u8, format: cairo_format_t, width: c_int, height: c_int, stride: c_int) ?*cairo_surface_t;
pub extern fn cairo_image_surface_get_data(surface: ?*cairo_surface_t) [*c]u8;
pub extern fn cairo_image_surface_get_format(surface: ?*cairo_surface_t) cairo_format_t;
pub extern fn cairo_image_surface_get_width(surface: ?*cairo_surface_t) c_int;
pub extern fn cairo_image_surface_get_height(surface: ?*cairo_surface_t) c_int;
pub extern fn cairo_image_surface_get_stride(surface: ?*cairo_surface_t) c_int;
pub extern fn cairo_image_surface_create_from_png(filename: [*c]const u8) ?*cairo_surface_t;
pub extern fn cairo_image_surface_create_from_png_stream(read_func: cairo_read_func_t, closure: ?*anyopaque) ?*cairo_surface_t;
pub extern fn cairo_recording_surface_create(content: cairo_content_t, extents: [*c]const cairo_rectangle_t) ?*cairo_surface_t;
pub extern fn cairo_recording_surface_ink_extents(surface: ?*cairo_surface_t, x0: [*c]f64, y0: [*c]f64, width: [*c]f64, height: [*c]f64) void;
pub extern fn cairo_recording_surface_get_extents(surface: ?*cairo_surface_t, extents: [*c]cairo_rectangle_t) cairo_bool_t;
pub const cairo_raster_source_acquire_func_t = ?*const fn (?*cairo_pattern_t, ?*anyopaque, ?*cairo_surface_t, [*c]const cairo_rectangle_int_t) callconv(.C) ?*cairo_surface_t;
pub const cairo_raster_source_release_func_t = ?*const fn (?*cairo_pattern_t, ?*anyopaque, ?*cairo_surface_t) callconv(.C) void;
pub const cairo_raster_source_snapshot_func_t = ?*const fn (?*cairo_pattern_t, ?*anyopaque) callconv(.C) cairo_status_t;
pub const cairo_raster_source_copy_func_t = ?*const fn (?*cairo_pattern_t, ?*anyopaque, ?*const cairo_pattern_t) callconv(.C) cairo_status_t;
pub const cairo_raster_source_finish_func_t = ?*const fn (?*cairo_pattern_t, ?*anyopaque) callconv(.C) void;
pub extern fn cairo_pattern_create_raster_source(user_data: ?*anyopaque, content: cairo_content_t, width: c_int, height: c_int) ?*cairo_pattern_t;
pub extern fn cairo_raster_source_pattern_set_callback_data(pattern: ?*cairo_pattern_t, data: ?*anyopaque) void;
pub extern fn cairo_raster_source_pattern_get_callback_data(pattern: ?*cairo_pattern_t) ?*anyopaque;
pub extern fn cairo_raster_source_pattern_set_acquire(pattern: ?*cairo_pattern_t, acquire: cairo_raster_source_acquire_func_t, release: cairo_raster_source_release_func_t) void;
pub extern fn cairo_raster_source_pattern_get_acquire(pattern: ?*cairo_pattern_t, acquire: [*c]cairo_raster_source_acquire_func_t, release: [*c]cairo_raster_source_release_func_t) void;
pub extern fn cairo_raster_source_pattern_set_snapshot(pattern: ?*cairo_pattern_t, snapshot: cairo_raster_source_snapshot_func_t) void;
pub extern fn cairo_raster_source_pattern_get_snapshot(pattern: ?*cairo_pattern_t) cairo_raster_source_snapshot_func_t;
pub extern fn cairo_raster_source_pattern_set_copy(pattern: ?*cairo_pattern_t, copy: cairo_raster_source_copy_func_t) void;
pub extern fn cairo_raster_source_pattern_get_copy(pattern: ?*cairo_pattern_t) cairo_raster_source_copy_func_t;
pub extern fn cairo_raster_source_pattern_set_finish(pattern: ?*cairo_pattern_t, finish: cairo_raster_source_finish_func_t) void;
pub extern fn cairo_raster_source_pattern_get_finish(pattern: ?*cairo_pattern_t) cairo_raster_source_finish_func_t;
pub extern fn cairo_pattern_create_rgb(red: f64, green: f64, blue: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_rgba(red: f64, green: f64, blue: f64, alpha: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_for_surface(surface: ?*cairo_surface_t) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_linear(x0: f64, y0: f64, x1: f64, y1: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_radial(cx0: f64, cy0: f64, radius0: f64, cx1: f64, cy1: f64, radius1: f64) ?*cairo_pattern_t;
pub extern fn cairo_pattern_create_mesh() ?*cairo_pattern_t;
pub extern fn cairo_pattern_reference(pattern: ?*cairo_pattern_t) ?*cairo_pattern_t;
pub extern fn cairo_pattern_destroy(pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_pattern_get_reference_count(pattern: ?*cairo_pattern_t) c_uint;
pub extern fn cairo_pattern_status(pattern: ?*cairo_pattern_t) cairo_status_t;
pub extern fn cairo_pattern_get_user_data(pattern: ?*cairo_pattern_t, key: [*c]const cairo_user_data_key_t) ?*anyopaque;
pub extern fn cairo_pattern_set_user_data(pattern: ?*cairo_pattern_t, key: [*c]const cairo_user_data_key_t, user_data: ?*anyopaque, destroy: cairo_destroy_func_t) cairo_status_t;
pub const CAIRO_PATTERN_TYPE_SOLID: c_int = 0;
pub const CAIRO_PATTERN_TYPE_SURFACE: c_int = 1;
pub const CAIRO_PATTERN_TYPE_LINEAR: c_int = 2;
pub const CAIRO_PATTERN_TYPE_RADIAL: c_int = 3;
pub const CAIRO_PATTERN_TYPE_MESH: c_int = 4;
pub const CAIRO_PATTERN_TYPE_RASTER_SOURCE: c_int = 5;
pub const enum__cairo_pattern_type = c_uint;
pub const cairo_pattern_type_t = enum__cairo_pattern_type;
pub extern fn cairo_pattern_get_type(pattern: ?*cairo_pattern_t) cairo_pattern_type_t;
pub extern fn cairo_pattern_add_color_stop_rgb(pattern: ?*cairo_pattern_t, offset: f64, red: f64, green: f64, blue: f64) void;
pub extern fn cairo_pattern_add_color_stop_rgba(pattern: ?*cairo_pattern_t, offset: f64, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_mesh_pattern_begin_patch(pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_mesh_pattern_end_patch(pattern: ?*cairo_pattern_t) void;
pub extern fn cairo_mesh_pattern_curve_to(pattern: ?*cairo_pattern_t, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64) void;
pub extern fn cairo_mesh_pattern_line_to(pattern: ?*cairo_pattern_t, x: f64, y: f64) void;
pub extern fn cairo_mesh_pattern_move_to(pattern: ?*cairo_pattern_t, x: f64, y: f64) void;
pub extern fn cairo_mesh_pattern_set_control_point(pattern: ?*cairo_pattern_t, point_num: c_uint, x: f64, y: f64) void;
pub extern fn cairo_mesh_pattern_set_corner_color_rgb(pattern: ?*cairo_pattern_t, corner_num: c_uint, red: f64, green: f64, blue: f64) void;
pub extern fn cairo_mesh_pattern_set_corner_color_rgba(pattern: ?*cairo_pattern_t, corner_num: c_uint, red: f64, green: f64, blue: f64, alpha: f64) void;
pub extern fn cairo_pattern_set_matrix(pattern: ?*cairo_pattern_t, matrix: [*c]const cairo_matrix_t) void;
pub extern fn cairo_pattern_get_matrix(pattern: ?*cairo_pattern_t, matrix: [*c]cairo_matrix_t) void;
pub const CAIRO_EXTEND_NONE: c_int = 0;
pub const CAIRO_EXTEND_REPEAT: c_int = 1;
pub const CAIRO_EXTEND_REFLECT: c_int = 2;
pub const CAIRO_EXTEND_PAD: c_int = 3;
pub const enum__cairo_extend = c_uint;
pub const cairo_extend_t = enum__cairo_extend;
pub extern fn cairo_pattern_set_extend(pattern: ?*cairo_pattern_t, extend: cairo_extend_t) void;
pub extern fn cairo_pattern_get_extend(pattern: ?*cairo_pattern_t) cairo_extend_t;
pub const CAIRO_FILTER_FAST: c_int = 0;
pub const CAIRO_FILTER_GOOD: c_int = 1;
pub const CAIRO_FILTER_BEST: c_int = 2;
pub const CAIRO_FILTER_NEAREST: c_int = 3;
pub const CAIRO_FILTER_BILINEAR: c_int = 4;
pub const CAIRO_FILTER_GAUSSIAN: c_int = 5;
pub const enum__cairo_filter = c_uint;
pub const cairo_filter_t = enum__cairo_filter;
pub extern fn cairo_pattern_set_filter(pattern: ?*cairo_pattern_t, filter: cairo_filter_t) void;
pub extern fn cairo_pattern_get_filter(pattern: ?*cairo_pattern_t) cairo_filter_t;
pub extern fn cairo_pattern_get_rgba(pattern: ?*cairo_pattern_t, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_pattern_get_surface(pattern: ?*cairo_pattern_t, surface: [*c]?*cairo_surface_t) cairo_status_t;
pub extern fn cairo_pattern_get_color_stop_rgba(pattern: ?*cairo_pattern_t, index: c_int, offset: [*c]f64, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_pattern_get_color_stop_count(pattern: ?*cairo_pattern_t, count: [*c]c_int) cairo_status_t;
pub extern fn cairo_pattern_get_linear_points(pattern: ?*cairo_pattern_t, x0: [*c]f64, y0: [*c]f64, x1: [*c]f64, y1: [*c]f64) cairo_status_t;
pub extern fn cairo_pattern_get_radial_circles(pattern: ?*cairo_pattern_t, x0: [*c]f64, y0: [*c]f64, r0: [*c]f64, x1: [*c]f64, y1: [*c]f64, r1: [*c]f64) cairo_status_t;
pub extern fn cairo_mesh_pattern_get_patch_count(pattern: ?*cairo_pattern_t, count: [*c]c_uint) cairo_status_t;
pub extern fn cairo_mesh_pattern_get_path(pattern: ?*cairo_pattern_t, patch_num: c_uint) [*c]cairo_path_t;
pub extern fn cairo_mesh_pattern_get_corner_color_rgba(pattern: ?*cairo_pattern_t, patch_num: c_uint, corner_num: c_uint, red: [*c]f64, green: [*c]f64, blue: [*c]f64, alpha: [*c]f64) cairo_status_t;
pub extern fn cairo_mesh_pattern_get_control_point(pattern: ?*cairo_pattern_t, patch_num: c_uint, point_num: c_uint, x: [*c]f64, y: [*c]f64) cairo_status_t;
pub extern fn cairo_matrix_init(matrix: [*c]cairo_matrix_t, xx: f64, yx: f64, xy: f64, yy: f64, x0: f64, y0: f64) void;
pub extern fn cairo_matrix_init_identity(matrix: [*c]cairo_matrix_t) void;
pub extern fn cairo_matrix_init_translate(matrix: [*c]cairo_matrix_t, tx: f64, ty: f64) void;
pub extern fn cairo_matrix_init_scale(matrix: [*c]cairo_matrix_t, sx: f64, sy: f64) void;
pub extern fn cairo_matrix_init_rotate(matrix: [*c]cairo_matrix_t, radians: f64) void;
pub extern fn cairo_matrix_translate(matrix: [*c]cairo_matrix_t, tx: f64, ty: f64) void;
pub extern fn cairo_matrix_scale(matrix: [*c]cairo_matrix_t, sx: f64, sy: f64) void;
pub extern fn cairo_matrix_rotate(matrix: [*c]cairo_matrix_t, radians: f64) void;
pub extern fn cairo_matrix_invert(matrix: [*c]cairo_matrix_t) cairo_status_t;
pub extern fn cairo_matrix_multiply(result: [*c]cairo_matrix_t, a: [*c]const cairo_matrix_t, b: [*c]const cairo_matrix_t) void;
pub extern fn cairo_matrix_transform_distance(matrix: [*c]const cairo_matrix_t, dx: [*c]f64, dy: [*c]f64) void;
pub extern fn cairo_matrix_transform_point(matrix: [*c]const cairo_matrix_t, x: [*c]f64, y: [*c]f64) void;
pub const struct__cairo_region = opaque {};
pub const cairo_region_t = struct__cairo_region;
pub const CAIRO_REGION_OVERLAP_IN: c_int = 0;
pub const CAIRO_REGION_OVERLAP_OUT: c_int = 1;
pub const CAIRO_REGION_OVERLAP_PART: c_int = 2;
pub const enum__cairo_region_overlap = c_uint;
pub const cairo_region_overlap_t = enum__cairo_region_overlap;
pub extern fn cairo_region_create() ?*cairo_region_t;
pub extern fn cairo_region_create_rectangle(rectangle: [*c]const cairo_rectangle_int_t) ?*cairo_region_t;
pub extern fn cairo_region_create_rectangles(rects: [*c]const cairo_rectangle_int_t, count: c_int) ?*cairo_region_t;
pub extern fn cairo_region_copy(original: ?*const cairo_region_t) ?*cairo_region_t;
pub extern fn cairo_region_reference(region: ?*cairo_region_t) ?*cairo_region_t;
pub extern fn cairo_region_destroy(region: ?*cairo_region_t) void;
pub extern fn cairo_region_equal(a: ?*const cairo_region_t, b: ?*const cairo_region_t) cairo_bool_t;
pub extern fn cairo_region_status(region: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_get_extents(region: ?*const cairo_region_t, extents: [*c]cairo_rectangle_int_t) void;
pub extern fn cairo_region_num_rectangles(region: ?*const cairo_region_t) c_int;
pub extern fn cairo_region_get_rectangle(region: ?*const cairo_region_t, nth: c_int, rectangle: [*c]cairo_rectangle_int_t) void;
pub extern fn cairo_region_is_empty(region: ?*const cairo_region_t) cairo_bool_t;
pub extern fn cairo_region_contains_rectangle(region: ?*const cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_region_overlap_t;
pub extern fn cairo_region_contains_point(region: ?*const cairo_region_t, x: c_int, y: c_int) cairo_bool_t;
pub extern fn cairo_region_translate(region: ?*cairo_region_t, dx: c_int, dy: c_int) void;
pub extern fn cairo_region_subtract(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_subtract_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_region_intersect(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_intersect_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_region_union(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_union_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_region_xor(dst: ?*cairo_region_t, other: ?*const cairo_region_t) cairo_status_t;
pub extern fn cairo_region_xor_rectangle(dst: ?*cairo_region_t, rectangle: [*c]const cairo_rectangle_int_t) cairo_status_t;
pub extern fn cairo_debug_reset_static_data() void;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 8);
pub const __clang_version__ = "18.1.8 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.8";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):228:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __PIE__ = @as(c_int, 2);
pub const __pie__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):359:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):360:9
pub const __znver4 = @as(c_int, 1);
pub const __znver4__ = @as(c_int, 1);
pub const __tune_znver4__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __EVEX512__ = @as(c_int, 1);
pub const __AVX512CD__ = @as(c_int, 1);
pub const __AVX512VPOPCNTDQ__ = @as(c_int, 1);
pub const __AVX512VNNI__ = @as(c_int, 1);
pub const __AVX512BF16__ = @as(c_int, 1);
pub const __AVX512DQ__ = @as(c_int, 1);
pub const __AVX512BITALG__ = @as(c_int, 1);
pub const __AVX512BW__ = @as(c_int, 1);
pub const __AVX512VL__ = @as(c_int, 1);
pub const __EVEX256__ = @as(c_int, 1);
pub const __AVX512VBMI__ = @as(c_int, 1);
pub const __AVX512VBMI2__ = @as(c_int, 1);
pub const __AVX512IFMA__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __WBNOINVD__ = @as(c_int, 1);
pub const __SHSTK__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX512F__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const CAIRO_H = "";
pub const CAIRO_VERSION_H = "";
pub const CAIRO_VERSION_MAJOR = @as(c_int, 1);
pub const CAIRO_VERSION_MINOR = @as(c_int, 18);
pub const CAIRO_VERSION_MICRO = @as(c_int, 2);
pub const CAIRO_FEATURES_H = "";
pub const CAIRO_HAS_FC_FONT = @as(c_int, 1);
pub const CAIRO_HAS_FT_FONT = @as(c_int, 1);
pub const CAIRO_HAS_GOBJECT_FUNCTIONS = @as(c_int, 1);
pub const CAIRO_HAS_IMAGE_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_MIME_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_OBSERVER_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_PDF_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_PNG_FUNCTIONS = @as(c_int, 1);
pub const CAIRO_HAS_PS_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_RECORDING_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_SCRIPT_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_SVG_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_TEE_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_USER_FONT = @as(c_int, 1);
pub const CAIRO_HAS_XCB_SHM_FUNCTIONS = @as(c_int, 1);
pub const CAIRO_HAS_XCB_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_XLIB_SURFACE = @as(c_int, 1);
pub const CAIRO_HAS_XLIB_XRENDER_SURFACE = @as(c_int, 1);
pub const CAIRO_DEPRECATED_H = "";
pub const CAIRO_FONT_TYPE_ATSUI = CAIRO_FONT_TYPE_QUARTZ;
pub const cairo_current_font_extents = @compileError("unable to translate macro: undefined identifier `cairo_current_font_extents_REPLACED_BY_cairo_font_extents`");
// /usr/include/cairo/cairo-deprecated.h:57:9
pub const cairo_get_font_extents = @compileError("unable to translate macro: undefined identifier `cairo_get_font_extents_REPLACED_BY_cairo_font_extents`");
// /usr/include/cairo/cairo-deprecated.h:58:9
pub const cairo_current_operator = @compileError("unable to translate macro: undefined identifier `cairo_current_operator_REPLACED_BY_cairo_get_operator`");
// /usr/include/cairo/cairo-deprecated.h:59:9
pub const cairo_current_tolerance = @compileError("unable to translate macro: undefined identifier `cairo_current_tolerance_REPLACED_BY_cairo_get_tolerance`");
// /usr/include/cairo/cairo-deprecated.h:60:9
pub const cairo_current_point = @compileError("unable to translate macro: undefined identifier `cairo_current_point_REPLACED_BY_cairo_get_current_point`");
// /usr/include/cairo/cairo-deprecated.h:61:9
pub const cairo_current_fill_rule = @compileError("unable to translate macro: undefined identifier `cairo_current_fill_rule_REPLACED_BY_cairo_get_fill_rule`");
// /usr/include/cairo/cairo-deprecated.h:62:9
pub const cairo_current_line_width = @compileError("unable to translate macro: undefined identifier `cairo_current_line_width_REPLACED_BY_cairo_get_line_width`");
// /usr/include/cairo/cairo-deprecated.h:63:9
pub const cairo_current_line_cap = @compileError("unable to translate macro: undefined identifier `cairo_current_line_cap_REPLACED_BY_cairo_get_line_cap`");
// /usr/include/cairo/cairo-deprecated.h:64:9
pub const cairo_current_line_join = @compileError("unable to translate macro: undefined identifier `cairo_current_line_join_REPLACED_BY_cairo_get_line_join`");
// /usr/include/cairo/cairo-deprecated.h:65:9
pub const cairo_current_miter_limit = @compileError("unable to translate macro: undefined identifier `cairo_current_miter_limit_REPLACED_BY_cairo_get_miter_limit`");
// /usr/include/cairo/cairo-deprecated.h:66:9
pub const cairo_current_matrix = @compileError("unable to translate macro: undefined identifier `cairo_current_matrix_REPLACED_BY_cairo_get_matrix`");
// /usr/include/cairo/cairo-deprecated.h:67:9
pub const cairo_current_target_surface = @compileError("unable to translate macro: undefined identifier `cairo_current_target_surface_REPLACED_BY_cairo_get_target`");
// /usr/include/cairo/cairo-deprecated.h:68:9
pub const cairo_get_status = @compileError("unable to translate macro: undefined identifier `cairo_get_status_REPLACED_BY_cairo_status`");
// /usr/include/cairo/cairo-deprecated.h:69:9
pub const cairo_concat_matrix = @compileError("unable to translate macro: undefined identifier `cairo_concat_matrix_REPLACED_BY_cairo_transform`");
// /usr/include/cairo/cairo-deprecated.h:70:9
pub const cairo_scale_font = @compileError("unable to translate macro: undefined identifier `cairo_scale_font_REPLACED_BY_cairo_set_font_size`");
// /usr/include/cairo/cairo-deprecated.h:71:9
pub const cairo_select_font = @compileError("unable to translate macro: undefined identifier `cairo_select_font_REPLACED_BY_cairo_select_font_face`");
// /usr/include/cairo/cairo-deprecated.h:72:9
pub const cairo_transform_font = @compileError("unable to translate macro: undefined identifier `cairo_transform_font_REPLACED_BY_cairo_set_font_matrix`");
// /usr/include/cairo/cairo-deprecated.h:73:9
pub const cairo_transform_point = @compileError("unable to translate macro: undefined identifier `cairo_transform_point_REPLACED_BY_cairo_user_to_device`");
// /usr/include/cairo/cairo-deprecated.h:74:9
pub const cairo_transform_distance = @compileError("unable to translate macro: undefined identifier `cairo_transform_distance_REPLACED_BY_cairo_user_to_device_distance`");
// /usr/include/cairo/cairo-deprecated.h:75:9
pub const cairo_inverse_transform_point = @compileError("unable to translate macro: undefined identifier `cairo_inverse_transform_point_REPLACED_BY_cairo_device_to_user`");
// /usr/include/cairo/cairo-deprecated.h:76:9
pub const cairo_inverse_transform_distance = @compileError("unable to translate macro: undefined identifier `cairo_inverse_transform_distance_REPLACED_BY_cairo_device_to_user_distance`");
// /usr/include/cairo/cairo-deprecated.h:77:9
pub const cairo_init_clip = @compileError("unable to translate macro: undefined identifier `cairo_init_clip_REPLACED_BY_cairo_reset_clip`");
// /usr/include/cairo/cairo-deprecated.h:78:9
pub const cairo_surface_create_for_image = @compileError("unable to translate macro: undefined identifier `cairo_surface_create_for_image_REPLACED_BY_cairo_image_surface_create_for_data`");
// /usr/include/cairo/cairo-deprecated.h:79:9
pub const cairo_default_matrix = @compileError("unable to translate macro: undefined identifier `cairo_default_matrix_REPLACED_BY_cairo_identity_matrix`");
// /usr/include/cairo/cairo-deprecated.h:80:9
pub const cairo_matrix_set_affine = @compileError("unable to translate macro: undefined identifier `cairo_matrix_set_affine_REPLACED_BY_cairo_matrix_init`");
// /usr/include/cairo/cairo-deprecated.h:81:9
pub const cairo_matrix_set_identity = @compileError("unable to translate macro: undefined identifier `cairo_matrix_set_identity_REPLACED_BY_cairo_matrix_init_identity`");
// /usr/include/cairo/cairo-deprecated.h:82:9
pub const cairo_pattern_add_color_stop = @compileError("unable to translate macro: undefined identifier `cairo_pattern_add_color_stop_REPLACED_BY_cairo_pattern_add_color_stop_rgba`");
// /usr/include/cairo/cairo-deprecated.h:83:9
pub const cairo_set_rgb_color = @compileError("unable to translate macro: undefined identifier `cairo_set_rgb_color_REPLACED_BY_cairo_set_source_rgb`");
// /usr/include/cairo/cairo-deprecated.h:84:9
pub const cairo_set_pattern = @compileError("unable to translate macro: undefined identifier `cairo_set_pattern_REPLACED_BY_cairo_set_source`");
// /usr/include/cairo/cairo-deprecated.h:85:9
pub const cairo_xlib_surface_create_for_pixmap_with_visual = @compileError("unable to translate macro: undefined identifier `cairo_xlib_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xlib_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:86:9
pub const cairo_xlib_surface_create_for_window_with_visual = @compileError("unable to translate macro: undefined identifier `cairo_xlib_surface_create_for_window_with_visual_REPLACED_BY_cairo_xlib_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:87:9
pub const cairo_xcb_surface_create_for_pixmap_with_visual = @compileError("unable to translate macro: undefined identifier `cairo_xcb_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xcb_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:88:9
pub const cairo_xcb_surface_create_for_window_with_visual = @compileError("unable to translate macro: undefined identifier `cairo_xcb_surface_create_for_window_with_visual_REPLACED_BY_cairo_xcb_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:89:9
pub const cairo_ps_surface_set_dpi = @compileError("unable to translate macro: undefined identifier `cairo_ps_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution`");
// /usr/include/cairo/cairo-deprecated.h:90:9
pub const cairo_pdf_surface_set_dpi = @compileError("unable to translate macro: undefined identifier `cairo_pdf_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution`");
// /usr/include/cairo/cairo-deprecated.h:91:9
pub const cairo_svg_surface_set_dpi = @compileError("unable to translate macro: undefined identifier `cairo_svg_surface_set_dpi_REPLACED_BY_cairo_surface_set_fallback_resolution`");
// /usr/include/cairo/cairo-deprecated.h:92:9
pub const cairo_atsui_font_face_create_for_atsu_font_id = @compileError("unable to translate macro: undefined identifier `cairo_atsui_font_face_create_for_atsu_font_id_REPLACED_BY_cairo_quartz_font_face_create_for_atsu_font_id`");
// /usr/include/cairo/cairo-deprecated.h:93:9
pub const cairo_current_path = @compileError("unable to translate macro: undefined identifier `cairo_current_path_DEPRECATED_BY_cairo_copy_path`");
// /usr/include/cairo/cairo-deprecated.h:95:9
pub const cairo_current_path_flat = @compileError("unable to translate macro: undefined identifier `cairo_current_path_flat_DEPRECATED_BY_cairo_copy_path_flat`");
// /usr/include/cairo/cairo-deprecated.h:96:9
pub const cairo_get_path = @compileError("unable to translate macro: undefined identifier `cairo_get_path_DEPRECATED_BY_cairo_copy_path`");
// /usr/include/cairo/cairo-deprecated.h:97:9
pub const cairo_get_path_flat = @compileError("unable to translate macro: undefined identifier `cairo_get_path_flat_DEPRECATED_BY_cairo_get_path_flat`");
// /usr/include/cairo/cairo-deprecated.h:98:9
pub const cairo_set_alpha = @compileError("unable to translate macro: undefined identifier `cairo_set_alpha_DEPRECATED_BY_cairo_set_source_rgba_OR_cairo_paint_with_alpha`");
// /usr/include/cairo/cairo-deprecated.h:99:9
pub const cairo_show_surface = @compileError("unable to translate macro: undefined identifier `cairo_show_surface_DEPRECATED_BY_cairo_set_source_surface_AND_cairo_paint`");
// /usr/include/cairo/cairo-deprecated.h:100:9
pub const cairo_copy = @compileError("unable to translate macro: undefined identifier `cairo_copy_DEPRECATED_BY_cairo_create_AND_MANY_INDIVIDUAL_FUNCTIONS`");
// /usr/include/cairo/cairo-deprecated.h:101:9
pub const cairo_surface_set_repeat = @compileError("unable to translate macro: undefined identifier `cairo_surface_set_repeat_DEPRECATED_BY_cairo_pattern_set_extend`");
// /usr/include/cairo/cairo-deprecated.h:102:9
pub const cairo_surface_set_matrix = @compileError("unable to translate macro: undefined identifier `cairo_surface_set_matrix_DEPRECATED_BY_cairo_pattern_set_matrix`");
// /usr/include/cairo/cairo-deprecated.h:103:9
pub const cairo_surface_get_matrix = @compileError("unable to translate macro: undefined identifier `cairo_surface_get_matrix_DEPRECATED_BY_cairo_pattern_get_matrix`");
// /usr/include/cairo/cairo-deprecated.h:104:9
pub const cairo_surface_set_filter = @compileError("unable to translate macro: undefined identifier `cairo_surface_set_filter_DEPRECATED_BY_cairo_pattern_set_filter`");
// /usr/include/cairo/cairo-deprecated.h:105:9
pub const cairo_surface_get_filter = @compileError("unable to translate macro: undefined identifier `cairo_surface_get_filter_DEPRECATED_BY_cairo_pattern_get_filter`");
// /usr/include/cairo/cairo-deprecated.h:106:9
pub const cairo_matrix_create = @compileError("unable to translate macro: undefined identifier `cairo_matrix_create_DEPRECATED_BY_cairo_matrix_t`");
// /usr/include/cairo/cairo-deprecated.h:107:9
pub const cairo_matrix_destroy = @compileError("unable to translate macro: undefined identifier `cairo_matrix_destroy_DEPRECATED_BY_cairo_matrix_t`");
// /usr/include/cairo/cairo-deprecated.h:108:9
pub const cairo_matrix_copy = @compileError("unable to translate macro: undefined identifier `cairo_matrix_copy_DEPRECATED_BY_cairo_matrix_t`");
// /usr/include/cairo/cairo-deprecated.h:109:9
pub const cairo_matrix_get_affine = @compileError("unable to translate macro: undefined identifier `cairo_matrix_get_affine_DEPRECATED_BY_cairo_matrix_t`");
// /usr/include/cairo/cairo-deprecated.h:110:9
pub const cairo_set_target_surface = @compileError("unable to translate macro: undefined identifier `cairo_set_target_surface_DEPRECATED_BY_cairo_create`");
// /usr/include/cairo/cairo-deprecated.h:111:9
pub const cairo_set_target_image = @compileError("unable to translate macro: undefined identifier `cairo_set_target_image_DEPRECATED_BY_cairo_image_surface_create_for_data`");
// /usr/include/cairo/cairo-deprecated.h:112:9
pub const cairo_set_target_pdf = @compileError("unable to translate macro: undefined identifier `cairo_set_target_pdf_DEPRECATED_BY_cairo_pdf_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:113:9
pub const cairo_set_target_png = @compileError("unable to translate macro: undefined identifier `cairo_set_target_png_DEPRECATED_BY_cairo_surface_write_to_png`");
// /usr/include/cairo/cairo-deprecated.h:114:9
pub const cairo_set_target_ps = @compileError("unable to translate macro: undefined identifier `cairo_set_target_ps_DEPRECATED_BY_cairo_ps_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:115:9
pub const cairo_set_target_quartz = @compileError("unable to translate macro: undefined identifier `cairo_set_target_quartz_DEPRECATED_BY_cairo_quartz_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:116:9
pub const cairo_set_target_win32 = @compileError("unable to translate macro: undefined identifier `cairo_set_target_win32_DEPRECATED_BY_cairo_win32_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:117:9
pub const cairo_set_target_xcb = @compileError("unable to translate macro: undefined identifier `cairo_set_target_xcb_DEPRECATED_BY_cairo_xcb_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:118:9
pub const cairo_set_target_drawable = @compileError("unable to translate macro: undefined identifier `cairo_set_target_drawable_DEPRECATED_BY_cairo_xlib_surface_create`");
// /usr/include/cairo/cairo-deprecated.h:119:9
pub const cairo_get_status_string = @compileError("unable to translate macro: undefined identifier `cairo_get_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string`");
// /usr/include/cairo/cairo-deprecated.h:120:9
pub const cairo_status_string = @compileError("unable to translate macro: undefined identifier `cairo_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string`");
// /usr/include/cairo/cairo-deprecated.h:121:9
pub const CAIRO_BEGIN_DECLS = "";
pub const CAIRO_END_DECLS = "";
pub const _cairo_export = @compileError("unable to translate macro: undefined identifier `__visibility__`");
// /usr/include/cairo/cairo.h:57:10
pub const _cairo_import = "";
pub const _cairo_api = "";
pub const cairo_public = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/cairo/cairo.h:70:9
pub inline fn CAIRO_VERSION_ENCODE(major: anytype, minor: anytype, micro: anytype) @TypeOf(((major * @as(c_int, 10000)) + (minor * @as(c_int, 100))) + (micro * @as(c_int, 1))) {
    _ = &major;
    _ = &minor;
    _ = &micro;
    return ((major * @as(c_int, 10000)) + (minor * @as(c_int, 100))) + (micro * @as(c_int, 1));
}
pub const CAIRO_VERSION = CAIRO_VERSION_ENCODE(CAIRO_VERSION_MAJOR, CAIRO_VERSION_MINOR, CAIRO_VERSION_MICRO);
pub const CAIRO_VERSION_STRINGIZE_ = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/cairo/cairo.h:85:9
pub inline fn CAIRO_VERSION_STRINGIZE(major: anytype, minor: anytype, micro: anytype) @TypeOf(CAIRO_VERSION_STRINGIZE_(major, minor, micro)) {
    _ = &major;
    _ = &minor;
    _ = &micro;
    return CAIRO_VERSION_STRINGIZE_(major, minor, micro);
}
pub const CAIRO_VERSION_STRING = CAIRO_VERSION_STRINGIZE(CAIRO_VERSION_MAJOR, CAIRO_VERSION_MINOR, CAIRO_VERSION_MICRO);
pub const CAIRO_TAG_DEST = "cairo.dest";
pub const CAIRO_TAG_LINK = "Link";
pub const CAIRO_TAG_CONTENT = "cairo.content";
pub const CAIRO_TAG_CONTENT_REF = "cairo.content_ref";
pub const CAIRO_COLOR_PALETTE_DEFAULT = @as(c_int, 0);
pub const CAIRO_MIME_TYPE_JPEG = "image/jpeg";
pub const CAIRO_MIME_TYPE_PNG = "image/png";
pub const CAIRO_MIME_TYPE_JP2 = "image/jp2";
pub const CAIRO_MIME_TYPE_URI = "text/x-uri";
pub const CAIRO_MIME_TYPE_UNIQUE_ID = "application/x-cairo.uuid";
pub const CAIRO_MIME_TYPE_JBIG2 = "application/x-cairo.jbig2";
pub const CAIRO_MIME_TYPE_JBIG2_GLOBAL = "application/x-cairo.jbig2-global";
pub const CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID = "application/x-cairo.jbig2-global-id";
pub const CAIRO_MIME_TYPE_CCITT_FAX = "image/g3fax";
pub const CAIRO_MIME_TYPE_CCITT_FAX_PARAMS = "application/x-cairo.ccitt.params";
pub const CAIRO_MIME_TYPE_EPS = "application/postscript";
pub const CAIRO_MIME_TYPE_EPS_PARAMS = "application/x-cairo.eps.params";
pub const _cairo = struct__cairo;
pub const _cairo_surface = struct__cairo_surface;
pub const _cairo_device = struct__cairo_device;
pub const _cairo_matrix = struct__cairo_matrix;
pub const _cairo_pattern = struct__cairo_pattern;
pub const _cairo_user_data_key = struct__cairo_user_data_key;
pub const _cairo_status = enum__cairo_status;
pub const _cairo_content = enum__cairo_content;
pub const _cairo_format = enum__cairo_format;
pub const _cairo_dither = enum__cairo_dither;
pub const _cairo_rectangle_int = struct__cairo_rectangle_int;
pub const _cairo_operator = enum__cairo_operator;
pub const _cairo_antialias = enum__cairo_antialias;
pub const _cairo_fill_rule = enum__cairo_fill_rule;
pub const _cairo_line_cap = enum__cairo_line_cap;
pub const _cairo_line_join = enum__cairo_line_join;
pub const _cairo_rectangle = struct__cairo_rectangle;
pub const _cairo_rectangle_list = struct__cairo_rectangle_list;
pub const _cairo_scaled_font = struct__cairo_scaled_font;
pub const _cairo_font_face = struct__cairo_font_face;
pub const _cairo_text_cluster_flags = enum__cairo_text_cluster_flags;
pub const _cairo_font_slant = enum__cairo_font_slant;
pub const _cairo_font_weight = enum__cairo_font_weight;
pub const _cairo_subpixel_order = enum__cairo_subpixel_order;
pub const _cairo_hint_style = enum__cairo_hint_style;
pub const _cairo_hint_metrics = enum__cairo_hint_metrics;
pub const _cairo_color_mode = enum__cairo_color_mode;
pub const _cairo_font_options = struct__cairo_font_options;
pub const _cairo_font_type = enum__cairo_font_type;
pub const _cairo_path_data_type = enum__cairo_path_data_type;
pub const _cairo_path_data_t = union__cairo_path_data_t;
pub const cairo_path = struct_cairo_path;
pub const _cairo_device_type = enum__cairo_device_type;
pub const _cairo_surface_type = enum__cairo_surface_type;
pub const _cairo_pattern_type = enum__cairo_pattern_type;
pub const _cairo_extend = enum__cairo_extend;
pub const _cairo_filter = enum__cairo_filter;
pub const _cairo_region = struct__cairo_region;
pub const _cairo_region_overlap = enum__cairo_region_overlap;
